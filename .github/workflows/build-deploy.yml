name: Run Actions

on:
  push:
    branches:
      - api-v2

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build images with no cache
      - name: Build fastapi image
        run: |
          docker build --no-cache \
            --build-arg BUILDTIME=${{ github.sha }} \
            -f docker/fastapi/Dockerfile \
            -t 288792505174.dkr.ecr.us-east-1.amazonaws.com/defi-backend-fastapi:latest .

      - name: Build celery image
        run: |
          docker build --no-cache \
            --build-arg BUILDTIME=${{ github.sha }} \
            -f docker/celery/Dockerfile \
            -t 288792505174.dkr.ecr.us-east-1.amazonaws.com/defi-backend-celery_worker:latest .

      - name: Build celery-beat image
        run: |
          docker build --no-cache \
            --build-arg BUILDTIME=${{ github.sha }} \
            -f docker/celery-beat/Dockerfile \
            -t 288792505174.dkr.ecr.us-east-1.amazonaws.com/defi-backend-celery_beat:latest .

      - name: Login ECR Repository
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 288792505174.dkr.ecr.us-east-1.amazonaws.com

      # Push images
      - name: Push images to ECR
        run: |
          docker push 288792505174.dkr.ecr.us-east-1.amazonaws.com/defi-backend-fastapi:latest
          docker push 288792505174.dkr.ecr.us-east-1.amazonaws.com/defi-backend-celery_worker:latest
          docker push 288792505174.dkr.ecr.us-east-1.amazonaws.com/defi-backend-celery_beat:latest

      - name: Update ECS task definition
        run: |
          # Get current task definition and remove invalid fields
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition Defi-Backend --query 'taskDefinition')
          echo "$TASK_DEFINITION" | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' > task-definition.json

          # Register new task definition revision
          aws ecs register-task-definition --cli-input-json file://task-definition.json
          NEW_TASK_ARN=$(aws ecs describe-task-definition --task-definition Defi-Backend --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "NEW_TASK_ARN=$NEW_TASK_ARN" >> $GITHUB_ENV

      - name: Deploy ECS task
        run: |
          aws ecs update-service \
            --cluster arn:aws:ecs:us-east-1:288792505174:cluster/DefiTradingCluster \
            --service Defi-Backend \
            --task-definition "$NEW_TASK_ARN" \
            --force-new-deployment
