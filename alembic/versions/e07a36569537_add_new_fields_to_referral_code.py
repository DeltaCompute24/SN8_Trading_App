"""Add new fields to referral code

Revision ID: e07a36569537
Revises: 
Create Date: 2024-12-16 15:13:21.431146

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e07a36569537'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('referral_codes')
    op.drop_table('users_balance')
    op.drop_index('ix_tournament_id', table_name='tournament')
    op.drop_table('tournament')
    op.drop_table('user_referral_codes')
    op.drop_table('payouts')
    op.drop_table('challenges')
    op.drop_table('payments')
    op.drop_table('firebase_users')
    op.drop_table('monitored_positions')
    op.drop_index('ix_transactions_order_id', table_name='transactions')
    op.drop_table('transactions')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('trader_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('hot_key', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('hot_key', name='user_hot_key')
    )
    op.create_table('transactions',
    sa.Column('order_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('trader_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('trade_pair', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('open_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('entry_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('leverage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('stop_loss', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('take_profit', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('order_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('asset_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('operation_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('cumulative_leverage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('cumulative_stop_loss', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cumulative_take_profit', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cumulative_order_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('close_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('close_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('profit_loss', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('position_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('trade_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('modified_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('upward', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('initial_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('old_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('average_entry_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('entry_price_list', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('leverage_list', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('order_type_list', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('max_profit_loss', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('profit_loss_without_fee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('taoshi_profit_loss', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('taoshi_profit_loss_without_fee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('hot_key', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('order_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('challenge_level', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('trailing', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('limit_order', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('min_price', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('max_price', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('order_id', name='transactions_pkey')
    )
    op.create_index('ix_transactions_order_id', 'transactions', ['order_id'], unique=False)
    op.create_table('monitored_positions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('position_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('trader_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('trade_pair', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('asset_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entry_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('cumulative_leverage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('cumulative_order_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('cumulative_stop_loss', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cumulative_take_profit', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='monitored_positions_pkey'),
    sa.UniqueConstraint('position_id', 'order_id', name='_position_order_uc')
    )
    op.create_table('firebase_users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('firebase_users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('firebase_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='firebase_users_pkey'),
    sa.UniqueConstraint('firebase_id', name='firebase_users_firebase_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('payments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('firebase_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('referral_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('challenge_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('step', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('phase', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['challenge_id'], ['challenges.id'], name='payments_challenge_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='payments_pkey'),
    sa.UniqueConstraint('challenge_id', name='payments_challenge_id_key')
    )
    op.create_table('challenges',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('challenges_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('trader_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('hot_key', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('active', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('challenge', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('register_on_test_net', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('register_on_main_net', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('pass_the_challenge', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('draw_down', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('profit_sum', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('response', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('message', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('hotkey_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('step', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('phase', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pass_the_main_net_challenge', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('challenge_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tournament_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('score', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['firebase_users.id'], name='challenges_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='challenges_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('payouts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('iban', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('bank_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('bank_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('bank_country', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('bic_swift_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('usdt_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tao_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['firebase_users.firebase_id'], name='payouts_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='payouts_pkey')
    )
    op.create_table('user_referral_codes',
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('referral_code_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['referral_code_id'], ['referral_codes.id'], name='user_referral_codes_referral_code_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['firebase_users.firebase_id'], name='user_referral_codes_user_id_fkey', ondelete='CASCADE')
    )
    op.create_table('tournament',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('challenge_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('winners', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('winning_score', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['challenge_id'], ['challenges.id'], name='tournament_challenge_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tournament_pkey'),
    sa.UniqueConstraint('challenge_id', name='tournament_challenge_id_key')
    )
    op.create_index('ix_tournament_id', 'tournament', ['id'], unique=False)
    op.create_table('users_balance',
    sa.Column('trader_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('hot_key', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('balance', sa.NUMERIC(precision=30, scale=4), autoincrement=False, nullable=True),
    sa.Column('balance_as_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('trader_id', 'hot_key', name='users_balance_pkey'),
    sa.UniqueConstraint('hot_key', name='users_balance_hot_ukey')
    )
    op.create_table('referral_codes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('code', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_valid', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('discount_percentage', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('valid_from', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('valid_to', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('multiple_use', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='referral_codes_pkey')
    )
    # ### end Alembic commands ###
